<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KuangKuangKuangha&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-06T03:21:19.906Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>KuangKuangKuang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计组实验之微程序控制器</title>
    <link href="http://example.com/2021/11/05/%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E4%B9%8B%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    <id>http://example.com/2021/11/05/%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E4%B9%8B%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8/</id>
    <published>2021-11-05T01:44:20.000Z</published>
    <updated>2021-11-06T03:21:19.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id><a href="#" class="headerlink" title></a></h3><h2 id="一、实验准备"><a href="#一、实验准备" class="headerlink" title="一、实验准备"></a>一、实验准备</h2><hr><ul><li><h4 id="连线："><a href="#连线：" class="headerlink" title="连线："></a>连线：</h4><p>将有关操作信号和控制开关对应接好<br>将控制器转换开关拨到“微程序”位置,微程序灯亮，将编程开关设置为“正常”位置，将单拍开关设置为1(朝上)。在单拍开关DP为1时，每按一次QD按钮，只执行一条微指令。    </p></li></ul><table><thead><tr><th>操作信号</th><th>IR4</th><th>IR5</th><th>IR6</th><th>IR7</th><th>C</th><th>Z</th></tr></thead><tbody><tr><td>控制开关</td><td>K0</td><td>K1</td><td>K2</td><td>K3</td><td>K4</td><td>K5</td></tr></tbody></table><p><img src="/2021/11/05/%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E4%B9%8B%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8/%E5%8F%8C%E7%AB%AF%E5%8F%A3.png" alt="双端口"></p><ul><li><h4 id="控制台操作：读寄存器、写寄存器、读存储器、写存储器"><a href="#控制台操作：读寄存器、写寄存器、读存储器、写存储器" class="headerlink" title="控制台操作：读寄存器、写寄存器、读存储器、写存储器"></a>控制台操作：读寄存器、写寄存器、读存储器、写存储器</h4>​    按复位按钮CLR后，拨动操作模式开关SWC、SWB、SWA到希望的位置，按一次QD按钮，则进入希望的控制台操作模式。控制台模式开关和控制台操作的对应关系如下：</li></ul><table><thead><tr><th>操作模式</th><th>功能选择</th><th>备注</th></tr></thead><tbody><tr><td>000</td><td>启动程序运行</td><td></td></tr><tr><td>001</td><td>写存储器</td><td></td></tr><tr><td>010</td><td>读存储器</td><td></td></tr><tr><td>011</td><td>读存储器</td><td></td></tr><tr><td>100</td><td>写存储器</td><td></td></tr></tbody></table><p>按一次复位按钮CLR按钮，能够结束本次跟踪操作，开始下一次跟踪操作。</p><ul><li><h4 id="指令的执行："><a href="#指令的执行：" class="headerlink" title="指令的执行："></a>指令的执行：</h4>按复位按钮CLR后，设置操作模式开关SWC=0、SWB=0、SWA=0，按一次QD按钮，则进入启动程序运行模式。设置电平开关K3<del>K0，使其代表希望的指令操作码IR7</del>IR4，按QD按钮，跟踪指令的执行。<br>按一次复位按钮CLR按钮，能够结束本次跟踪操作，开始下一次跟踪操作。</li></ul><h2 id="二、实验原理"><a href="#二、实验原理" class="headerlink" title="二、实验原理"></a>二、实验原理</h2><hr><ul><li>微指令格式<img src="/2021/11/05/%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E4%B9%8B%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8/%E5%BE%AE%E6%8C%87%E4%BB%A4%E6%A0%BC%E5%BC%8F.png" alt="微指令格式"></li></ul><p><img src="/2021/11/05/%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E4%B9%8B%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8/%E7%AC%94%E8%AE%B0.jpg" alt="笔记"></p><p>根据机器指令功能、格式和数据通路所需的控制信号，TEC-8采用如图2.5所示的微指令格式。</p><p>微指令<strong>字长40位</strong>，顺序字段11位(<strong>判别字段P4~P0</strong>，<strong>后继微地址NµA5~NµA0</strong>)，<strong>控制字段29位</strong>，微命令直接控制。</p><p>前面的3个实验已经介绍了主要的微命令(控制信号)，介绍过的微命令不再重述，这里介绍后继微地址、判别字段和其它的微命令。</p><table><thead><tr><th>信号</th><th>功能说明</th></tr></thead><tbody><tr><td>NµA5~NµA0</td><td>下址，在微指令顺序执行的情况下，它是下一条微指令的地址</td></tr><tr><td>P0</td><td>=1时，根据后继微地址NµA5~NµA0和模式开关SWC、SWB、SWA确定下一条微指令的地址。见图2.6微程序流程图</td></tr><tr><td>P1</td><td>=1时，根据后继微地址NµA5<del>NµA0和指令操作码IR7</del>IR4确定下一条微指令的地址。见图2.6微程序流程图。</td></tr><tr><td>P2</td><td>=1时，根据后继微地址NµA5~NµA0和进位C确定下一条微指令的地址。见图2.6 微程序流程图。</td></tr><tr><td>P3</td><td>=1时，根据后继微地址NµA5~NµA0和结果为0标志Z确定下一条微指令的地址。见图2.6微程序流程图。</td></tr><tr><td>P4</td><td>=1时，根据后继微地址NµA5~NµA0和中断信号INT确定下一条微指令的地址。模型计算机中，中断信号INT由时序发生器在接到中断请求信号后产生。</td></tr><tr><td>STOP</td><td>=1时，在T3结束后时序发生器停止输出节拍脉冲T1、T2、T3。</td></tr><tr><td>LIAR</td><td>=1时，在T3的上升沿，将PC7~PC0写入中断地址寄存器IAR。</td></tr><tr><td>INTDI</td><td>=1时，置允许中断标志(在时序发生器中)为0，禁止TEC-8模型计算机响应中断请求</td></tr><tr><td>INTEN</td><td>=1时，置允许中断标志(在时序发生器中)为1，允许TEC-8模型计算机响应中断请求</td></tr><tr><td>LABUS</td><td>=1时，将中断地址寄存器中的地址送数据总线DBUS。</td></tr><tr><td>PCADD</td><td>=1时，将当前的PC值加上相对转移量，生成新的PC。</td></tr></tbody></table><h2 id="三、关于实验的实验的理解与说明"><a href="#三、关于实验的实验的理解与说明" class="headerlink" title="三、关于实验的实验的理解与说明"></a>三、关于实验的实验的理解与说明</h2><hr><p>PS：应为大部分操作都是一样的，所以每一类只做一两个例子</p><p><img src="/2021/11/05/%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E4%B9%8B%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8/%E5%BE%AE%E7%A8%8B%E5%BA%8F.png" alt="微程序"></p><ul><li>一个微程序中的程序是一般是写好的，就是说如上图的指令控制程序设计好之后，你就可以通后编码微命令来操作各种如<code>add，mov，sub</code>的指令了，可以看到大部分指令都是分为取指周期和执行周期的，取指周期在上，执行周期在下，加上p0～p4各种选择信号，各种各样的指令就可以在时间上有序的执行了</li></ul><ul><li>除了图中红色的注释之外，再对其中的一些细节进行说明</li></ul><ol><li><p>计组的操作箱中，一按CLR按键，微地址寄存器就会被清零，即变为<code>00</code>，从新开始微地址的索引与控制</p></li><li><p>一些控制信号的说明（计组教材后面有详细的，但大多都没用，很容易混淆）</p></li></ol><table><thead><tr><th>控制信号</th><th>说明</th></tr></thead><tbody><tr><td>SEL3和SEL2</td><td>组合控制A端口的输入，通过两位二进制🌲进行区别，即00选择R0寄存器，01-R1，10-R2，11-R3。相当于双端口实验中的RD1和RD0</td></tr><tr><td>SEL1和SEL0</td><td>组合控制B端口的输入，通过两位二进制🌲进行区别，即00选择R0寄存器，01选择R1，10选择R2，11选择R3。相当于双端口实验中的RS1和RS0</td></tr><tr><td>PCINC</td><td>即pc increment，pc计数器+1</td></tr><tr><td>P1</td><td>解释：判别位。如果等于0，说明没有分支，只有一条通路，可以直接向下走。如果为1，说明有分支，还需要根据其他控制信号选择分支。</td></tr><tr><td></td><td></td></tr></tbody></table><p><strong>切记：如双端口图中旁边拉出来的线如RD0，RD1，SBUS之类的都是控制信号（只有0和1），只是起一个简单的开关作用。也就是说如果没有开关，数据可以直接流通的。</strong></p><h2 id="四、完成实验报告"><a href="#四、完成实验报告" class="headerlink" title="四、完成实验报告"></a>四、完成实验报告</h2><h3 id="写存储器部分"><a href="#写存储器部分" class="headerlink" title="写存储器部分"></a>写存储器部分</h3><hr><p><img src="/2021/11/05/%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E4%B9%8B%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8/%E5%86%99%E5%AD%98%E5%82%A8%E5%99%A8.png" alt="写存储器"></p><h3 id="读存储器部分"><a href="#读存储器部分" class="headerlink" title="读存储器部分"></a>读存储器部分</h3><hr><p><img src="/2021/11/05/%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E4%B9%8B%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8/%E8%AF%BB%E5%AD%98%E5%82%A8%E5%99%A8.png" alt="读存储器"></p><h3 id="写寄存器部分"><a href="#写寄存器部分" class="headerlink" title="写寄存器部分"></a>写寄存器部分</h3><hr><p><img src="/2021/11/05/%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E4%B9%8B%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8/%E5%86%99%E5%AF%84%E5%AD%98%E5%99%A8.png" alt="写存储器"></p><h3 id="读寄存器部分"><a href="#读寄存器部分" class="headerlink" title="读寄存器部分"></a>读寄存器部分</h3><hr><p><img src="/2021/11/05/%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E4%B9%8B%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8/%E8%AF%BB%E5%AF%84%E5%AD%98%E5%99%A8.png" alt="读寄存器"></p><h3 id="机器指令部分"><a href="#机器指令部分" class="headerlink" title="机器指令部分"></a>机器指令部分</h3><hr><p><img src="/2021/11/05/%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E4%B9%8B%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8/%E6%9C%BA%E5%99%A8%E6%8C%87%E4%BB%A4.png" alt="机器指令"></p><h2 id="实验感悟"><a href="#实验感悟" class="headerlink" title="实验感悟"></a>实验感悟</h2><hr><p>这个微程序实验可以综合前面几次的实验，对cpu工作方式的理解还是有很深的帮助的，有一些控制信号的作用还是没弄清楚，等以后实验继续深入吧，慢慢来加油</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h2 id=&quot;一、实验准备&quot;&gt;&lt;a href=&quot;#一、实验准备&quot; class=&quot;headerlink&quot; title=&quot;一、实验准备&quot;&gt;&lt;/a&gt;一、实验准备&lt;/h2&gt;&lt;hr&gt;</summary>
      
    
    
    
    <category term="计组" scheme="http://example.com/categories/%E8%AE%A1%E7%BB%84/"/>
    
    
    <category term="实验报告" scheme="http://example.com/tags/%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>指令</title>
    <link href="http://example.com/2021/10/26/%E6%8C%87%E4%BB%A4/"/>
    <id>http://example.com/2021/10/26/%E6%8C%87%E4%BB%A4/</id>
    <published>2021-10-26T01:36:31.000Z</published>
    <updated>2021-11-06T03:12:58.766Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指令系统概述"><a href="#指令系统概述" class="headerlink" title="指令系统概述"></a>指令系统概述</h2><h5 id="指令："><a href="#指令：" class="headerlink" title="指令："></a>指令：</h5><p>· 计算机能直接识别、执行的操作命令（机器指令）<br>· 是冯诺依曼结构计算机“程序控制”原理实现的载体<br>· 是软、硬件界面和程序员操作计算机硬件的接口<br>· 是硬件设计的依据，是软件设计的基础，直接影响计算机系统的性能</p><h5 id="指令系统（指令集）："><a href="#指令系统（指令集）：" class="headerlink" title="指令系统（指令集）："></a>指令系统（指令集）：</h5><p>一台计算机中所有机器指令的集合</p><p>· 系列机：同一公司不同时期生产，系统结构和指令系统基本相同的计算机（向下兼容性）<br>· 兼容机：不同公司生产，系统结构和指令系统基本相同的计算机<br>指令字长：</p><p>指令中包含的二进制位数<br>决定于操作码的长度、操作数地址的长度、操作数的个数<br>与机器字长相比可分为：单字长指令、双字长指令、半字长指令等长度指令<br>多字长指令：解决寻址较大存储空间的问题（扩展指令长度），但取指令的访存次数较多，影响速度，占用空间大<br>等长指令：指令字长度固定，对硬件的设计简化有利<br>变长指令：指令字长度根据需要可变<br>指令分类：</p><p>根据计算机层次结构分类</p><p>根据指令中地址码字段的个数分类</p><p>根据指令中操作数的物理位置分类<br>根据指令的功能分类</p><p>指令的存储： 大端模式与小端模式（详细见本栏文章《存储器层次结构总结——基本知识要点汇总》大端和小端数据存放方式部分）</p><h2 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h2><h3 id="指令基本格式"><a href="#指令基本格式" class="headerlink" title="指令基本格式"></a>指令基本格式</h3><p>操作码：指出指令所进行的操作</p><p>地址码：表示参加运算的数据应从存储器的哪个单元取，运算的结果应存到哪个单元</p><p>操作码字段的位数与支持的最大指令数量有关<br>寻址方式字段的位数与支持的寻址方式种类有关<br>地址码字段的作用及影响与其位数和寻址方式有关<br>在指令系统中若所有指令的长度相同，则称为等长指令；相应的如果指令系统中指令的长度不相同，则称为变长（不等长）指令</p><p>等长指令方便设计；不等长指令节约存储空间</p><h4 id="等长指令格式"><a href="#等长指令格式" class="headerlink" title="等长指令格式"></a>等长指令格式</h4><p>优点： 定长指令结构规整，有利于简化硬件，尤其是指令译码部件的设计</p><p>不足： 定长指令平均长度长，容易出现冗余码点和指令不易扩展等不足</p><p>在等长指令系统中，指令可以采用固定长度的操作码（即定长操作码），也可以采用长度不固定的操作码（即扩展/变长操作码）</p><p>定长操作码指令格式</p><p>假定操作码占m位，则最多表示2m个不同指令</p><p>扩展（变长）操作码指令格式<br>定长指令中将操作码位数扩展至操作数地址码字段（即将用不到的地址码位数并入到操作码中用作操作码），或将操作数位数向前扩展至操作码字段（即将操作码左移，将操作码用不到的位数并入到操作数地址码中用作地址码）</p><p>变长指令格式<br>各种指令字的长度随指令功能的不同而不同，如指令可分为单字长指令、半字长指令或多字长指令</p><p>优点： 变长指令结构灵活，能充分利用指令中的每一位，因此指令码点冗余少，指令的平均长度短，易于扩展</p><p>不足： 但由于格式不规整，不同指令的取指事件可能不同，导致控制复杂</p><p>混合编码指令格式<br>混合编码指令格式是定长指令格式和变长指令结构的综合，它提供若干长度固定的指令字，以期达到既能减少目标代码的长度又能降低译码复杂度的目标</p><p>指令和操作数的寻址方式<br>基本概念：</p><p>寻址方式：确定本条指令的操作数地址或下一条要执行指令的指令地址，直到程序结束<br>寻址方式的划分：指令寻址、操作数寻址（即指令中数据的寻址）<br>程序计数器PC：用于存放下一条指令所在单元的地址。ARM型CPU中为程序计数器PC，X86型CPU中为指令指针寄存器IP，用于控制程序中指令的执行顺序<br>指令寻址<br>顺序寻址<br>指令在内存中是顺序存放，当执行一段程序时，通常是一条指令接一条指令地顺序执行。程序计数器PC（指令指针寄存器IP）每执行一条指令，PC+1（“1”指存储1条指令所占用的字节单元数，和编址方式有关），指向下一条欲执行指令的指令地址，这种程序顺序执行的过程称为指令的顺序寻址</p><p>跳跃寻址<br>当程序执行循环指令或转移指令等指令时，指令的寻址采用跳跃寻址方式，即下一条指令的地址不是由程序计数器PC+1产生，而是将本条指令给出的目标地址直接装入PC给出</p><p>操作数寻址（数据寻址）<br>基本概念：</p><p>形式地址：指令字中的地址<br>有效地址：操作数的真实内存地址<br>地址码字段通常为形式地址，形式地址与有效地址间需要进行转换，寻址过程就是把操作数的形式地址根据寻址方式转换为操作数的有效地址的过程，寻址方式由寻址特征位标识</p><p>立即寻址（立即数寻址）<br>形式地址就是操作数，一般以补码形式进行表示<br>取指操作将数据与指令一并读入CPU内部的寄存器，即只取指令访存一次，执行阶段不访存<br>优点：数据直接送给CPU，因此在指令执行阶段不访存，取指操作将数据与指令一并读入CPU内部的寄存器，指令执行速度快，便于程序设计（如变量赋初值）<br>缺点：形式地址的位数限制的立即数的范围<br>一般为双字长指令<br>直接寻址（直接内存寻址）<br>形式地址就是有效地址<br>以一地址指令为例</p><p>执行过程为直接利用有效地址访问对应内存，从内存单元中将操作数取出并对其完成操作码的操作，之后送到寄存器，即执行阶段需要访存一次<br>优点：操作数地址直接给出不需要变换，实现简单<br>缺点：形式地址的位数决定了该指令操作数的寻址范围，且操作数的地址不易修改<br>通常为双字长指令<br>间接寻址<br>通过地址码字段中的形式地址访问主存一次，获得有效地址，再基于有效地址进行二次访问内存，才能获得操作数（以速率换访存范围），即执行阶段最少访问主存两次，也可能进行多次间址<br>优点：可扩大寻址范围，便于编制程序<br>缺点：多次访问主存，访问速率过慢<br>寄存器寻址<br>操作数不放在内存中，而是放在CPU的通用寄存器中，指令中给出的操作数地址是通用寄存器的编号<br>优点：操作数在寄存器中，指令执行速度快；能访问的数据大小一般与计算机字长有关，不受形式地址的限制<br>寄存器间接寻址<br>地址码在字段给出的是寄存器编号，通过地址码字段中的形式地址访问寄存器一次，获得有效地址，再基于有效地址访问内存获得操作数（解决间接寻址两次访问主存速度慢的问题）<br>便于编制循环程序<br>【立即数寻址、直接内存寻址、寄存器寻址、寄存器间接寻址为最基本的四种指令数据寻址方式（即每种计算机均包含）】</p><p>计算机中指令等数据均以二进制进行表示，为了方便程序员使用和编写，可使用指令助记符进行标识，例如移动指令的助记符可为MOV。使用指令助记符进行一项指令功能完整的标识，即为一条指令</p><p>以x86架构指令系统为例，部分汇编指令如下：</p><p>汇编指令相关内容以及x86架构CPU寄存器等相关内容详细见桐小白《微机原理与接口技术》专栏文章《汇编语言程序设计初步——debug编写调试指令序列》</p><p>隐含寻址<br>寻址方式隐含在操作码中或者操作数地址隐含在操作码中<br>偏移寻址<br>相对寻址： 把程序计数器PC的内容加上指令格式中的形式地址形成操作数的有效地址。程序计数器的内容就是当前指令的地址，形式地址通常称为偏移量（可正可负，补码形式给出）。相对寻址，就是相对于当前的指令地址进行浮动</p><p>形式地址的位数决定操作数的寻址范围<br>广泛用于转移指令<br>程序员无需用指令的绝对地址编程<br>基址寻址方式： 将CPU中基址寄存器的内容加上指令格式中的形式地址形成操作数的有效地址</p><p>基址寄存器可采用CPU内的一个专用寄存器作为基址寄存器，位数可比通用寄存器的位数还大，从而可以在较大的存储空间中寻址。也可以用通用寄存器作为基址寄存器，用户可指定哪个通用寄存器作基址寄存器<br>有利于多道程序设计（动态定位）<br>对某一程序而言，基址值一旦设定（由操作系统或管理程序指定），在程序的执行过程中将不会改变，因此访问不同数据需修改形式地址<br>变址寻址方式： 将CPU中某个变址寄存器的内容与形式地址相加形成操作数有效地址，变址寄存器同样可以是CPU中的专用寄存器或者通用寄存器</p><p>不改变指令即可改变数据的有效地址，即变址寄存器的内容由用户给出、可变，指令的形式地址不变<br>便于处理数组、循环等程序的规律性变化问题<br>堆栈寻址方式<br>先进后出的存储方法。计算机中堆栈分为串连堆栈、存储器堆栈<br>串连堆栈：一些计算机的CPU中有一组专门的寄存器，每个寄存器能保存一个字的数据，由专用的寄存器组构成堆栈的存储空间称为串连堆栈（硬堆栈）<br>存储器堆栈：在计算机中利用一部分主存储器来作为堆栈空间。存储器类型的堆栈中需要一个堆栈指示器SP（CPU中一个专用的寄存器），指示器指定的存储器单元就是堆栈的栈顶（软堆栈）<br>是一个由高地址向低地址延伸的空间<br>能够具有程序员要求的任意长度<br>存储器堆栈的数目由程序员自己决定<br>可以用对存储器寻址的任何一条指令来对堆栈中的数据进行寻址<br>以x86架构指令系统为例，部分汇编指令如下：</p><p>汇编指令相关内容以及x86架构CPU寄存器等相关内容详细见桐小白《微机原理与接口技术》专栏文章《汇编语言程序设计初步——debug编写调试指令序列》</p><h2 id="CISC和RISC的基本概念"><a href="#CISC和RISC的基本概念" class="headerlink" title="CISC和RISC的基本概念"></a>CISC和RISC的基本概念</h2><p>计算机处理器包含有实现各种功能的指令或微指令，指令集越丰富，为微处理器编写程序就越容易，但是丰富的微指令集会影响其性能</p><p>CISC： 复杂指令计算机。CISC包括一个丰富的微指令集，这些微指令简化了在处理器上运行的程序的创建。指令由汇编语言所组成，把一些原来由软件实现的常用的功能改用硬件的指令系统实现，编程者的工作因而减少许多，在每个指令期同时处理一些低阶的操作或运算，以提高计算机的执行速度，这种系统就被称为复杂指令系统</p><p>在CISC指令集的各种指令中，其使用频率却相差悬殊，大约有20%的指令会被反复使用，占整个程序代码的80%。而余下的80%的指令却不经常使用，在程序设计中只占20%</p><p>RISC： 精简指令集计算机。是一种执行较少类型计算机指令的微处理器，起源于80年代的MIPS主机（即RISC机），RISC机中采用的微处理器统称RISC处理器。这样一来，它能够以更快的速度执行操作（每秒执行更多百万条指令，即MIPS）</p><p>RISC主要特点：</p><p>指令数量相对少，寻址方式相对少<br>指令格式相对少，指令为等长指令，适合进行流水线操作<br>读取存储器使用LOAD指令，写存储器使用STORE指令<br>CPU内部的寄存器相对多，用于暂存数据。所有操作在寄存器进行，大大减少访问存储器操作<br>控制器的设计采用硬件布线<br>RISC和CISC各有优势，而且界限并不那么明显。现代的CPU往往采用CISC的外围，内部加入了RISC的特性，如超长指令集CPU就是融合了RISC和CISC的优势，成为未来的CPU发展方向之一<br>————————————————</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;指令系统概述&quot;&gt;&lt;a href=&quot;#指令系统概述&quot; class=&quot;headerlink&quot; title=&quot;指令系统概述&quot;&gt;&lt;/a&gt;指令系统概述&lt;/h2&gt;&lt;h5 id=&quot;指令：&quot;&gt;&lt;a href=&quot;#指令：&quot; class=&quot;headerlink&quot; title=&quot;指令：</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>lucky2021部署</title>
    <link href="http://example.com/2021/10/17/lucky2021%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2021/10/17/lucky2021%E9%83%A8%E7%BD%B2/</id>
    <published>2021-10-17T13:12:06.000Z</published>
    <updated>2021-11-06T03:11:23.035Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简要部署流程"><a href="#简要部署流程" class="headerlink" title="简要部署流程"></a>简要部署流程</h3><p>1.首先创建数据库实例，在阿里云rds上吧啦吧啦创建一个，然后在本地建立一个连接，可以用navicat，新建连接，要将阿里云上数据库的域名创建连接，测试连接，并运行sql文件，记得web项目中的配置要修改为远程信息。</p><p>2.编写Dockerfile文件，制作镜像，并push到阿里云registy上，然后登录服务器再从registy 上 pull到服务器上，运行容器即可。</p><p>3.最后，dns服务绑定域名，加上端口即可开始测试<br><a href="http://lucky2021.muxixyz.com:5001/api/ccnulogin">http://lucky2021.muxixyz.com:5001/api/ccnulogin</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简要部署流程&quot;&gt;&lt;a href=&quot;#简要部署流程&quot; class=&quot;headerlink&quot; title=&quot;简要部署流程&quot;&gt;&lt;/a&gt;简要部署流程&lt;/h3&gt;&lt;p&gt;1.首先创建数据库实例，在阿里云rds上吧啦吧啦创建一个，然后在本地建立一个连接，可以用navicat，新建</summary>
      
    
    
    
    
    <category term="部署" scheme="http://example.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>C+Mysql</title>
    <link href="http://example.com/2021/10/15/C-Mysql/"/>
    <id>http://example.com/2021/10/15/C-Mysql/</id>
    <published>2021-10-15T06:51:50.000Z</published>
    <updated>2021-11-06T03:21:56.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="抛出问题"><a href="#抛出问题" class="headerlink" title="抛出问题"></a>抛出问题</h2><p>今天de了个bug, 在vscode上用c++链接mysql数据库，不得不说zjj学长还是牛啊，每一步都感觉十分踏实。2020暑期学校实训的时候就有这个问题了，因为最近在看csapp第七章链接的部分，就想起这个问题了，决定一定要解决。</p><h3 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h3><p>实训的内容要用c语言操作mysql数据库，所以要在开头引入头文件：&lt;mysql.h&gt;， 我自己是在c_cpp_properties.json中的<code>includePath</code>中加入了mysql的include路径，<code>/usr/local/mysql/include</code>, 我也是到这个时候才知道mysql会自己提供供c语言使用&lt;mysql.h&gt;， 加入之后就可以正常引入#include&lt;mysql.h&gt;了，不会报错了。</p><p>PS:关于include路径<br>#include&lt;mysql.h&gt;<br>linux下，include会首先去/usr/include, /usr/local/include等include路径下去寻找，此外，我们还可以通过设置环境变量指定其他的搜索路径：（我自己还没试过）</p><p><strong>C</strong><br>export C_INCLUDE_PATH=XXXX:$C_INCLUDE_PATH<br><strong>CPP</strong><br>export CPLUS_INCLUDE_PATH=XXX:$CPLUS_INCLUDE_PATH</p><p>以上修改可以直接命令行输入（一次性），可以在/etc/profile中完成（对所有用户生效），也可以在用户home目录下的.bashrc或.bash_profile中添加（针对某个用户生效），修改完后重新登录即生效。</p><p><strong>这样头文件的部分就解决了</strong></p><h3 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a>Part2</h3><p>接下来，我就开始试探性的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc test.c</span><br></pre></td></tr></table></figure><p>结果报错<br><img src="/Users/zhangkuang/Desktop/Snipaste_2021-10-11_23-40-23.png" alt="demo"><br>为什么呢，我明明成功引入了mysql.h啊，在这里也卡了好久，痛苦，后来，TT说啥可能是vscode找到了mysql.h，gcc 没找到mysql.h 我这么一想，斯～，有道理啊，那就先这样想。</p><p>接下来就是想想怎么让gcc 找到mysql.h，查了资料，用<code>-I</code>参数指定include头文件的地址<br><code>gcc -I /usr/local/mysql/include -I /usr/local/include test.c</code></p><p>先放张图，待会儿有用<br><img src="/Users/zhangkuang/Desktop/compiler.png" alt="compiler"><br>果然可以，gcc找到了mysql.h， 打新的问题又来了，Test.c文件中用到的两个函数居然Undefined，后面又显示ld: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Undefined symbols <span class="keyword">for</span> architecture x86_64:</span><br><span class="line">$  <span class="string">&quot;_mysql_init&quot;</span>, referenced from:</span><br><span class="line">$      _main <span class="keyword">in</span> test-159c97.o</span><br><span class="line">$  <span class="string">&quot;_mysql_real_connect&quot;</span>, referenced from:</span><br><span class="line">$      _main <span class="keyword">in</span> test-159c97.o</span><br><span class="line">ld: symbol(s) not found <span class="keyword">for</span> architecture x86_64</span><br></pre></td></tr></table></figure><p>上面这张图，应该可以判断是到了链接这一步出了问题，编译器和汇编器的任务应该完成了,接下来应该是解决链接mysql的时候要链接哪些依赖库了，但是依赖库又有静态链接和动态链接，这里查阅了相关资料。</p><h4 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h4><p>链接器把多个二进制的目标文件（object file）链接成一个单独的可执行文件。在链接过程中，它必须把符号（变量名、函数名等一些列标识符）用对应的数据的内存地址（变量地址、函数地址等）替代，以完成程序中多个模块的外部引用。<br>GCC 的-l选项可以让我们手动添加链接库。<br>数学库的文件名是 libm.a。前缀lib和后缀.a是标准的，m是基本名称，GCC 会在-l选项后紧跟着的基本名称的基础上自动添加这些前缀、后缀，本例中，基本名称为 m。<br>eg: gcc main.c -o main.out -lm<br>使用-L选项，为 GCC 增加另一个搜索链接库的目录：<br>eg: gcc main.c -o main.out -L/usr/lib -lm</p><h4 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h4><p>Linux 下动态链接库（shared object file，共享对象文件）的文件后缀为.so，它是一种特殊的目标文件（object file），可以在程序运行时被加载（链接）进来。<br>GCC 生成动态链接库:<br>如果想创建一个动态链接库，可以使用 GCC 的**-shared<strong>选项。输入文件可以是源文件、汇编文件或者目标文件。<br>另外还得结合</strong>-fPIC**选项。<br>-fPIC 选项作用于编译阶段，告诉编译器产生与位置无关代码（Position-Independent Code）；这样一来，产生的代码中就没有绝对地址了，全部使用相对地址，所以代码可以被加载器加载到内存的任意位置，都可以正确的执行。<br>这正是共享库所要求的，共享库被加载时，在内存的位置不是固定的。<br>eg: gcc -fPIC -shared func.c -o libfunc.so</p><h4 id="编译和链接"><a href="#编译和链接" class="headerlink" title="编译和链接"></a>编译和链接</h4><p>C/C++程序在linux下被编译和连接时，GCC/G++会查找系统默认的include和link的路径，以及自己在编译命令中指定的路径。自己指定的路径就不说了，这里说明一下系统自动搜索的路径。</p><p>【1】include头文件路径<br>除了默认的/usr/include, /usr/local/include等include路径外，还可以通过设置环境变量来添加系统include的路径：<br># C<br>export C_INCLUDE_PATH=XXXX:$C_INCLUDE_PATH<br># CPP<br>export CPLUS_INCLUDE_PATH=XXX:$CPLUS_INCLUDE_PATH</p><p>以上修改可以直接命令行输入（一次性），可以在/etc/profile中完成（对所有用户生效），也可以在用户home目录下的.bashrc或.bash_profile中添加（针对某个用户生效），修改完后重新登录即生效。</p><p>【2】link链接库文件路径<br>链接库文件在连接（静态库和共享库）和运行（仅限于使用共享库的程序）时被使用，其搜索路径是在系统中进行设置的（也可以在编译命令中通过 -l -L 来指定，这里讲的是使用系统默认搜索路径）。<br>一般 Linux 系统把 /lib /usr/lib /usr/local/lib 作为默认的库搜索路径，所以使用这几个目录中的链接库文件可直接被搜索到（不需要专门指定链接库路径）。对于默认搜索路径之外的库，则需要将其所在路径添加到gcc/g++的搜索路径之中。<br>链接库文件的搜索路径指定有两种方式：1）修改/etc/so.ld.conf 2）修改环境变量，在其中添加自己的路径</p><p>1）在环境变量中添加<br>动态链接库搜索路径：<br>export LD_LIBRARY_PATH=XXX:$LD_LIBRARY_PATH<br>静态链接库搜索路径：<br>export LIBRARY_PATH=XXX:$LIBRARY_PATH<br>以上修改可以直接命令行输入（一次性），可以在/etc/profile中完成（对所有用户生效），也可以在用户home目录下的.bashrc或.bash_profile中添加（针对某个用户生效）,修改完后重新登录即生效。</p><p>2）在/etc/ld.so.conf 中添加指定的链接库搜索路径（需要root权限），然后运行 /sbin/ldconfig，以达到刷新 /etc/ld.so.cache的效果。</p><p>以上两种方式均可以达到指定链接库搜索路径的效果。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>最后</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -I /usr/<span class="built_in">local</span>/mysql/include -I /usr/<span class="built_in">local</span>/include  -L /usr/<span class="built_in">local</span>/lib -rpath /usr/<span class="built_in">local</span>/mysql/lib  -lmysqlclient test.c</span><br></pre></td></tr></table></figure><p>通过这条命令解决了问题</p><p>解释：同过rpath指定了动态链接库时的搜索路径<code>/usr/local/mysql/lib</code></p><p>-L 后面的<code>/usr/local/lib</code>可以去掉，这是指定静态库和动态库时搜索的路径，我们的问题中链接mysql的时动态库<code>@rpath/libmysqlclient.21.dylib</code>,也叫共享库，这里用rpath指定共享库<code>/usr/local/mysql/lib</code>，和<code>-l</code>指定链接的动态库名<code>mysqlclient</code>，接着编译就行了。(我试过了如果只指定rpath是不行的，必须指定名字mysqlclient，冲！)</p><p>PS：静态库时编译时链接，动态库时运行时链接，运行时链接可以用<code>rpath</code>指定搜索路径，静态库用<code>-I</code>参数就行了<br>看到success那一刻，我他妈泪目了</p><p>Tips：ldd可以用来看可执行文件链接了哪些动态库，MacOs上没有这个工具，但可以用自带的Otool 来替换，使用这个工具的目的是你已经链接成可执行文件了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;抛出问题&quot;&gt;&lt;a href=&quot;#抛出问题&quot; class=&quot;headerlink&quot; title=&quot;抛出问题&quot;&gt;&lt;/a&gt;抛出问题&lt;/h2&gt;&lt;p&gt;今天de了个bug, 在vscode上用c++链接mysql数据库，不得不说zjj学长还是牛啊，每一步都感觉十分踏实。202</summary>
      
    
    
    
    <category term="问题小记" scheme="http://example.com/categories/%E9%97%AE%E9%A2%98%E5%B0%8F%E8%AE%B0/"/>
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/10/14/hello-world/"/>
    <id>http://example.com/2021/10/14/hello-world/</id>
    <published>2021-10-14T14:25:26.310Z</published>
    <updated>2021-10-15T06:59:20.316Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
